# ConfigMap for Spring Boot application properties
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
data:
  # Spring Boot configuration properties
  application.properties: |
    # Application name
    spring.application.name=pmbackend

    # Database configuration
    spring.datasource.url=jdbc:mysql://mysql:3306/password_manager
    spring.datasource.username=root
    # spring.datasource.password=root 
    spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

    # JPA/Hibernate settings
    spring.jpa.hibernate.ddl-auto=update
    spring.jpa.show-sql=true # Set to false in production

    # Server configuration
    server.port=8080
    
    # Eureka configuration
    eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/
    
    # Auth server configuration (using internal service name and port)
    auth.server.url=http://auth-server:8080 
    
    # Password encryption secret placeholder (value injected via env var PASSWORD_ENCRYPTION_SECRET)
    password.encryption.secret=${PASSWORD_ENCRYPTION_SECRET}
    
    # Prometheus backend endpoints 
    management.endpoints.web.exposure.include=* # Be more specific in production (e.g., health,prometheus)
    management.endpoint.health.show-details=always # Consider 'when-authorized' in production
    management.endpoint.prometheus.enabled=true
    management.metrics.export.prometheus.enabled=true
---
# Backend Spring Boot Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  # Pod selector matching
  selector:
    matchLabels:
      app: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: pmbackend:latest
          imagePullPolicy: Never # For local development
          ports:
            - containerPort: 8080 # Spring Boot application port
          # Environment configuration
          env:
            # Point Spring Boot to the mounted config file
            - name: SPRING_CONFIG_LOCATION 
              value: "/app/config/application.properties" 
            # Inject password encryption secret
            - name: PASSWORD_ENCRYPTION_SECRET 
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: password-encryption-secret # Key name in app-secrets
            # Inject database password (Spring Boot automatically picks up SPRING_DATASOURCE_PASSWORD)
            - name: SPRING_DATASOURCE_PASSWORD 
              valueFrom:
                secretKeyRef:
                  name: app-secrets
                  key: db-password # Key name in app-secrets
          # Mount ConfigMap as a file
          volumeMounts:
            - name: config-volume
              mountPath: /app/config # Mount the directory
          # Health check
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 20 # Wait longer for backend
            periodSeconds: 10 # Probe interval
      # Volumes configuration
      volumes:
        - name: config-volume
          configMap:
            name: backend-config
            items: # Specify the file to mount from the ConfigMap data
            - key: application.properties
              path: application.properties
---
# Backend Service for internal communication
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8080 # Service port
      targetPort: 8080 # Container port
      nodePort: 30081 # Expose on NodePort
  type: NodePort # Use NodePort to match local-deployment.sh output
